local  CHOOSE_ABILITY = hash("choose_ability")

local ability_places = {}
local all_nodes = {}
local choosed_nodes = {}

local function set_color_and_visible(self, _pick_node)
	--new color on picked node
	local old_color = gui.get_color(_pick_node)
	gui.set_color(_pick_node, vmath.vector4(0.5, 0.5, 0.5, 1))

	--disable all nodes
	timer.delay(1, false,  function()
		gui.set_enabled(gui.get_node("all"), false)
		msg.post("/GUI#pause", "unpaused")

		msg.post("/GUI#pause", "unhide")
		msg.post("/GUI#active_abilities", "unhide")

		--old color
		gui.set_color(_pick_node, old_color)
	end)

	self.all_enabled = false
end

local function random_abilities(self)
	math.randomseed(os.time())
	
	choosed_nodes = {}
	
	for index, place in ipairs(ability_places) do
		--check choosed nodes
		local node_exist = false
		local index_rand_node = 0
		
		while true do
			index_rand_node = math.random(#all_nodes)
			
			for i, node in ipairs(choosed_nodes) do
				if node == all_nodes[index_rand_node] then
					node_exist = true
					break
				end
			end

			if not node_exist then
				break
			end

			node_exist = false
		end

		--add node to choosed nodes table if node not exist
		table.insert(choosed_nodes, all_nodes[index_rand_node])

		--replace node and set enable
		gui.set_position(all_nodes[index_rand_node], place)
		gui.set_enabled(all_nodes[index_rand_node], true)
	end
end

local function message_to_ability(ability_url, icon)
	msg.post(ability_url, "up_lvl")
	msg.post("/GUI#active_abilities", "ability_selected", { selected_ability = icon })
end

function init(self)
	msg.post(".", "acquire_input_focus")

	all_nodes[1] = gui.get_node("shoot_back")
	all_nodes[2] = gui.get_node("shoot_offhand")
	all_nodes[3] = gui.get_node("electrotyne_bullet")
	all_nodes[4] = gui.get_node("smoke_bomb")

	ability_places[1] = vmath.vector3(0, 15, 0)
	ability_places[2] = vmath.vector3(0, -10, 0)
	ability_places[3] = vmath.vector3(0, -35, 0)

	self.all_enabled = false
end

function on_message(self, message_id, message, sender)
	if message_id == CHOOSE_ABILITY then
		msg.post("/GUI#pause", "paused")
		gui.set_enabled(gui.get_node("all"), true)
		random_abilities(self)

		msg.post("/GUI#pause", "hide")
		msg.post("/GUI#active_abilities", "hide")

		timer.delay(0.5, false, function()
			self.all_enabled = true
		end)
	end
end

function on_input(self, action_id, action)
	if (self.all_enabled == true) then
		--if select ability shoot_back
		if action.pressed and (gui.pick_node(all_nodes[1], action.x, action.y)) then
			message_to_ability("default:/shoot_back#shoot_back", "shoot back icon")
			set_color_and_visible(self, all_nodes[1])
		--if select ability shoot_offhand
		elseif action.pressed and (gui.pick_node(all_nodes[2], action.x, action.y)) then
			message_to_ability("default:/shoot_offhand#shoot_offhand", "shoot offhand icon")
			set_color_and_visible(self, all_nodes[2])
		--if select ability electrolyte_bullet
		elseif action.pressed and (gui.pick_node(all_nodes[3], action.x, action.y)) then
			message_to_ability("default:/hero/electrolyte_go#electrolyte_bullet", "shoot electrotyne icon")
			set_color_and_visible(self, all_nodes[3])
		--if select ability smoke_bomb
		elseif action.pressed and (gui.pick_node(all_nodes[4], action.x, action.y)) then
			message_to_ability("default:/smoke_bomb#smoke_bomb", "smoke bomb icon")
			set_color_and_visible(self, all_nodes[4])
		end
	end
end